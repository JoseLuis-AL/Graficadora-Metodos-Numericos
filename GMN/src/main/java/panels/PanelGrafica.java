package panels;

import aproximacion.Aproximacion;
import conversion.Transformador;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author Aguilera Luzania José Luis.
 * @author Castro Márquez Francisco Javier.
 * @author Monge Tinoco Manuel Crisólogo.
 */
public class PanelGrafica extends JPanel {

    private final int xMin = -20;
    private final int xMax = 20;
    private final int yMin = -20;
    private final int yMax = 20;

    private int ancho;
    private int alto;

    private final int unidad = 60;
    private int escalaAncho;
    private int escalaAlto;

    private final ArrayList<Point2D.Double> puntosFuncion = new ArrayList();

    private final Color colorEjes = new Color(230, 230, 230);
    private final Color colorMarco = new Color(102, 102, 102);
    private final Color colorFuncion = new Color(46, 170, 230);
    private final Color colorRaiz = new Color(242, 37, 32);

    /**
     * Crea un nuevo Panel principal.
     */
    public PanelGrafica() {
        initComponents();
        evaluar();
    }

    private void evaluar() {
        for (int x = xMin; x <= xMax; x++) {
            puntosFuncion.add(new Point2D.Double(x, Aproximacion.f(x)));
        }
    }

    /**
     * Dibuja el plano XY y la gráfica f en el panel.
     *
     * @param canvas Componente Graphics para dibujar.
     */
    public void graficar(Graphics canvas) {
        ancho = getWidth();
        alto = getHeight();

        Transformador transformador = new Transformador(xMin, yMin, xMax, yMax,
                0, 0, ancho, alto);

        // Fondo.
        canvas.setColor(Color.white);
        canvas.fillRect(0, 0, ancho, alto);

        // Cuadrícula.
        canvas.setColor(colorEjes);
        escalaAncho = ancho / unidad;
        escalaAlto = alto / unidad;
        
        int anchoCuadrante = ancho / 2;
        int altoCuadrante = alto / 2;
        for (int i = anchoCuadrante; i < ancho; i += escalaAncho) {
            canvas.drawLine(i, 0, i, alto);
        }
        for (int i = anchoCuadrante; i > 0; i -= escalaAncho) {
            canvas.drawLine(i, 0, i, alto);
        }
        for (int i = altoCuadrante; i < alto; i += escalaAlto) {
            canvas.drawLine(0, i, ancho, i);
        }
        for (int i = altoCuadrante; i > 0; i -= escalaAlto) {
            canvas.drawLine(0, i, ancho, i);
        }

        // Función
        canvas.setColor(colorFuncion);
        int numPuntos = puntosFuncion.size() - 1;
        for (int i = 0; i < numPuntos; i++) {
            Point2D.Double p = puntosFuncion.get(i);
            Point2D.Double q = puntosFuncion.get(i + 1);

            Point p1 = transformador.proyecta(p.x, p.y);
            Point p2 = transformador.proyecta(q.x, q.y);

            canvas.drawLine(p1.x, p1.y, p2.x, p2.y);
        }

        // Ejes.
        canvas.setColor(Color.black);

        Point p1 = transformador.proyecta(xMin, 0);
        Point p2 = transformador.proyecta(xMax, 0);
        canvas.drawLine(p1.x, p1.y, p2.x, p2.y);

        p1 = transformador.proyecta(0, yMin);
        p2 = transformador.proyecta(0, yMax);
        canvas.drawLine(p1.x, p1.y, p2.x, p2.y);

        // Marco
        canvas.setColor(colorMarco);
        canvas.drawRect(0, 0, ancho, alto);
    }

    /**
     * Dibuja la raíz de la función f como una X roja.
     *
     * @param xs la raíz.
     */
    public void graficarRaiz(double xs) {
        Transformador transformador = new Transformador(xMin, yMin, xMax, yMax,
                0, 0, getWidth(), getHeight());

        Graphics canvas = getGraphics();
        graficar(canvas);
        canvas.setColor(colorRaiz);

        Point p1 = transformador.proyecta(xs - 1, 1);
        Point p2 = transformador.proyecta(xs + 1, -1);
        canvas.drawLine(p1.x, p1.y, p2.x, p2.y);

        p1 = transformador.proyecta(xs + 1, 1);
        p2 = transformador.proyecta(xs - 1, -1);
        canvas.drawLine(p1.x, p1.y, p2.x, p2.y);
    }

    @Override
    public void paint(Graphics canvas) {
        graficar(canvas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
